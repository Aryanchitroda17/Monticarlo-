import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from scipy.stats import norm
from datetime import datetime
%matplotlib inline

# --- Black-Scholes Functions ---
def d1(S, K, r, stdev, T):
    return (np.log(S / K) + (r + 0.5 * stdev ** 2) * T) / (stdev * np.sqrt(T))

def d2(S, K, r, stdev, T):
    return d1(S, K, r, stdev, T) - stdev * np.sqrt(T)

def BSM(S, K, r, stdev, T):
    return S * norm.cdf(d1(S, K, r, stdev, T)) - K * np.exp(-r * T) * norm.cdf(d2(S, K, r, stdev, T))

# --- Download data ---
tic = "^NSEI"
data = pd.DataFrame()
data[tic] = yf.download(tic, start="2020-01-01")["Close"]

# --- Parameters ---
S = data.iloc[-1][0]  # current stock price
log_return = np.log(1 + data.pct_change())
stdev = log_return.std().values[0] * np.sqrt(250)  # annualized volatility
r = 0.0632
K = 24000
T = 0.5  # 6 months

# --- Black-Scholes Call Price ---
bsm_price = BSM(S, K, r, stdev, T)

# --- Monte Carlo Simulation ---
t_intervals = int(250 * T)
delta_t = T / t_intervals
iterations = 10000
Z = np.random.standard_normal((t_intervals + 1, iterations))
S_paths = np.zeros_like(Z)
S_paths[0] = S

for t in range(1, t_intervals + 1):
    S_paths[t] = S_paths[t - 1] * np.exp((r - 0.5 * stdev**2) * delta_t + stdev * np.sqrt(delta_t) * Z[t])

# --- Monte Carlo Option Pricing ---
P = np.maximum(S_paths[-1] - K, 0)
mc_price = np.exp(-r * T) * np.mean(P)

# --- Output ---
print("Current NIFTY50 Price:", round(S, 2))
print("Strike Price:", K)
print("Volatility (Annualized):", round(stdev, 4))
print("Time to Maturity (Years):", T)
print("Black-Scholes Call Price:", round(bsm_price, 2))
print("Monte Carlo Call Price:", round(mc_price, 2))

# --- Plot Payoff Paths ---
plt.figure(figsize=(10, 6))
plt.plot(S_paths[:, :10])
plt.axhline(K, color='red', linestyle='--', label="Strike Price (K)")
plt.title("Simulated Stock Price Paths (Monte Carlo)")
plt.xlabel("Time Steps (Days)")
plt.ylabel("Stock Price")
plt.legend()
plt.grid(True)
plt.show()
